// Generated by CoffeeScript 1.7.1
(function() {
  var Bookmark, BookmarkCollection, BookmarkItemView, BookmarkView, bookmarks, getBookmarks,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  getBookmarks = function(type) {
    return $.Deferred(function(defer) {
      return $.ajax({
        url: "data/" + type + ".json",
        dataType: 'json'
      }).done(function(res) {
        return defer.resolve(res.items);
      });
    }).promise();
  };

  Bookmark = (function(_super) {
    __extends(Bookmark, _super);

    function Bookmark() {
      return Bookmark.__super__.constructor.apply(this, arguments);
    }

    return Bookmark;

  })(Backbone.Model);

  BookmarkCollection = (function(_super) {
    __extends(BookmarkCollection, _super);

    function BookmarkCollection() {
      return BookmarkCollection.__super__.constructor.apply(this, arguments);
    }

    BookmarkCollection.prototype.model = Bookmark;

    BookmarkCollection.prototype.update = function(type) {
      this.trigger('updatestart');
      return getBookmarks(type).done((function(_this) {
        return function(bookmarks) {
          _this.reset(bookmarks);
          return _this.trigger('updatesuccess');
        };
      })(this));
    };

    return BookmarkCollection;

  })(Backbone.Collection);

  bookmarks = new BookmarkCollection;

  BookmarkItemView = (function(_super) {
    __extends(BookmarkItemView, _super);

    function BookmarkItemView() {
      return BookmarkItemView.__super__.constructor.apply(this, arguments);
    }

    BookmarkItemView.prototype.tagName = 'div';

    BookmarkItemView.prototype.className = 'item';

    BookmarkItemView.prototype.render = function() {
      var compiled;
      compiled = _.template("<a href=\"<%- url %>\"><%- title %></a><br>\n<%- description %>");
      this.$el.html(compiled(this.model.toJSON()));
      return this;
    };

    return BookmarkItemView;

  })(Backbone.View);

  BookmarkView = (function(_super) {
    __extends(BookmarkView, _super);

    function BookmarkView() {
      return BookmarkView.__super__.constructor.apply(this, arguments);
    }

    BookmarkView.prototype.initialize = function() {
      bookmarks.on('updatestart', (function(_this) {
        return function() {
          return _this.$el.empty();
        };
      })(this));
      return bookmarks.on('updatesuccess', (function(_this) {
        return function() {
          return _this.refresh();
        };
      })(this));
    };

    BookmarkView.prototype.refresh = function() {
      bookmarks.each((function(_this) {
        return function(bookmark) {
          var view;
          view = new BookmarkItemView({
            model: bookmark
          });
          return _this.$el.append(view.render().el);
        };
      })(this));
      return this;
    };

    return BookmarkView;

  })(Backbone.View);

  $(function() {
    var bookmarkView;
    bookmarkView = new BookmarkView({
      el: $('#bookmarks')
    });
    return $('.loadBookmarks').click(function() {
      var type;
      type = $(this).data('type');
      return bookmarks.update(type);
    });
  });

}).call(this);
