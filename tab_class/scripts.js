// Generated by CoffeeScript 1.3.1
(function() {
  var TabManager, TabSet;

  TabSet = (function() {

    TabSet.name = 'TabSet';

    function TabSet($a) {
      this.$a = $a;
      this._callbacks = [];
      this.$panelDiv = $(this.$a.attr('href'));
      this._eventify();
      this._handleFirstStats();
    }

    TabSet.prototype._eventify = function() {
      var _this = this;
      this.$a.click(function(e) {
        e.preventDefault();
        return _this.active();
      });
      return this;
    };

    TabSet.prototype._handleFirstStats = function() {
      this.$a.show();
      this._activated = this.$a.hasClass('on');
      if (!this._activated) {
        this.$panelDiv.hide();
      }
      return this;
    };

    TabSet.prototype.active = function() {
      if (this._activated) {
        return this;
      }
      this.$a.addClass('on');
      this.$panelDiv.show();
      this._activated = true;
      $.each(this._callbacks, function(i, fn) {
        return fn();
      });
      return this;
    };

    TabSet.prototype.deactive = function() {
      if (!this._activated) {
        return this;
      }
      this.$a.removeClass('on');
      this.$panelDiv.hide();
      this._activated = false;
      return this;
    };

    TabSet.prototype.onactive = function(fn) {
      this._callbacks.push(fn);
      return this;
    };

    return TabSet;

  })();

  TabManager = (function() {

    TabManager.name = 'TabManager';

    function TabManager($el) {
      var _this = this;
      this.$el = $el;
      this._tabSets = (this.$el.find('ul.tabs a')).map(function(i, a) {
        return new TabSet($(a));
      });
      this._eventify();
    }

    TabManager.prototype._eventify = function() {
      var _this = this;
      this._tabSets.each(function(i, tabSet) {
        tabSet.onactive(function() {
          return _this.deactiveWithout(tabSet);
        });
        return true;
      });
      return this;
    };

    TabManager.prototype.deactiveWithout = function(tabSet) {
      this._tabSets.each(function(i, current) {
        if (current !== tabSet) {
          current.deactive();
        }
        return true;
      });
      return this;
    };

    return TabManager;

  })();

  $(function() {
    return $('.tabSet').each(function() {
      return new TabManager($(this));
    });
  });

}).call(this);
